#!/bin/sh

# BOOK
# Simon Hugh Moore
#
# Store and search for bookmarks

bookmark_dir=~/Documents/notes/
editor="${EDITOR:-vim}"


cd $bookmark_dir

__usage="usage: $(basename "$0") [OPTIONS]"
__help="$__usage

Store and search for bookmarks/links in markdown

Options:
  -a, --add [uri] [file] [tag]       Add bookmark
  -e, --edit [file]                  Open bookmark file in EDITOR
  -o, --open [OPTIONS]               Use FZF to open bookmark in BROWSER
  -l, --list [OPTIONS]               List bookmarks, files, tags
  -m, --menu [OPTIONS]               Find bookmarks using FZF
  -mm, --mmenu [OPTIONS]             Same as menu but pass result back into FZF
  -s, --search <term>                Search for bookmarks
  -q, --query <expression>           Get bookmarks filtered by query
  -g, --grep <term>                  Grep files recursively in bookmark directory
  -c, --content                      Show all content, don't filter out bookmarks
  --addfile <file>                   Add file
  -h, --help                         Print this help message
"


###-------------------###
### UTILITY FUNCTIONS ###
###-------------------###

# print formatted error
_error(){ printf "%s\nerror: %s\n" "$__usage" "$1"; exit 1; }

# get title from URL
_get_html_title(){
    curl --silent --fail "$1" | awk -vRS="</title>" '/<title.*>/{gsub(/.*<title.*>|\n+/,"");print;exit}' | recode -q html..utf8
}

# format tag in the form `# Word Word`
_format_tag(){ sed 's/##*/& /;s/[[:space:]]./\U&/g;s/^[^#]/# &/;s/[[:space:]][[:space:]]*/ /g'; }

# get a list of files
# if no argument is given, then get all files
# 
# if argument is given, then get files whose name begins with argument
# or whose directory name in path begins with argument
# 
# if argument begins with `^` then only get files whose path begins with argument
_list_files(){
    case "$1" in
        ^*) file="^./${1#^}" ;;
        *) file="/${1}" ;;
    esac
    find . -not -path '*/\.*' -name "*.md" -type f -printf "%p\n" | grep "${file}" | sed 's|^\./||;s|\.md$||'
}

# get file content of files whose name begins with argument (see _list_files)
_get_file_content(){
    _list_files "${1}" | tr '\n' '\0' | xargs -0 -I{} cat "./{}.md"
}

# get tag content
# retrieves all content of all files associated with tag
# if tag starts with `!` then negate tag
_get_tag_content(){
    tag="$( echo "${1#!}" | _format_tag )"
    count="#${tag%# *}"
    case "$1" in
        !*) sed -E "/^${tag}$/,/^#{1,${#count}}[[:space:]].*$/{/^${tag}$/{d;n};/^#{1,${#count}}[[:space:]].*$/p;d}" ;;
        *) sed -nE "/^${tag}$/,/^#{1,${#count}}[[:space:]].*$/{/^${tag}$/{p;n};/^#{1,${#count}}[[:space:]].*$/d;p}" ;;
    esac
}

# get bookmarks from stream
_get_bm(){ grep -o '\[.*\](.*)' ; }

# get bookmarks only if `-b` flag is set
_filter_bm(){
    if [ -z $content_flag ]; then
        _get_bm
    else
        cat
    fi
}

# get list of tags from files
_tags_from_file(){
    _get_file_content "${1}" | grep "^##*[[:space:]].*$" | sort -u | sed 's/#[[:space:]][[:space:]]*/#/'
}

# get a list of tags and the file the tag is from
_tags_with_file(){
    _list_files "${1}" | tr '\n' '\0' | xargs -0 -I{} grep -H '^#' '{}.md' | sed 's/:/ /;s/#[[:space:]][[:space:]]*/#/;s/\.md[[:space:]]/ /'
}


###-------------------###
### COMMAND FUNCTIONS ###
###-------------------###

_add(){
    [ -z "$1" ] && _error "add: expected at least one argument"
    uri="$1"
    file="${2:-misc}.md"
    [ ! -f "${file}" ] && _error "add: file does not exist"

    tag="$( echo "${3:-Misc}" | _format_tag )"
    title="$( _get_html_title "$uri" )"
    [ "$title" = "" ] && title="$uri"
    bookmark="[${title}](${uri})"

    # add tag if it does not exist
    _add_tag "${tag}" "${file%.md}"

    # check if bookmark already exists in tag
    _get_file_content "${file}" | _get_tag_content "${tag}" | _get_bm | grep -qF "$bookmark" && exit

    # Add bookmark after tag
    sed "/^${tag}$/a - ${bookmark}" "${file}" > "${file}.tmp"
    mv "${file}.tmp" "${file}"

    # send notification confirming bookmark
    notify-send "${title}" "Added to ${file} ${tag}"
}

_add_file(){
    [ -z "${1}" ] && _error "add file: expected at least one argument"

    # if dir ends with '/', use 'misc' as file
    file="$( echo "${1}" | sed 's|/$|/misc|' )"
    
    [ -f "${file}.md" ] && _error "add file: file exists"

    # if file does not exist, create it with formatted heading
    if [ ! -f "${file}.md" ]; then
        dir="${file%/*}"
        mkdir -p "$dir"
        touch "${file}.md"
        _add_tag "#${file##*/}" "${file}"
    fi
}

# add a formatted tag to file
_add_tag(){
    [ -z "${2}" ] && _error "add tag: expected two arguments"
    tag="$(echo "${1}" | _format_tag )" 
    file="${2}.md"

    [ ! -f "${file}" ] && _error "add tag: file does not exist"
    
    # check if tag already in file
    if ! grep -q "^${tag}$" "${file}"; then
        # make sure last line is empty
        tail -n1 "${file}" | grep -c '^[[:space:]]*$' || echo "" >> "${file}"

        echo "${tag}" >> "${file}"
    fi
}

_edit(){
    [ -z "$1" ] && _error "edit: expected at least one argument"
    [ ! -f "${1}.md" ] && _error "edit: file does not exist"
    $editor "${1}.md"
}

# use fzf to find bookmarks
_menu(){
    case "$1" in
        # list all bookmarks in fzf
        all|bm) _get_file_content "${2}" | _filter_bm | fzf --exact -m ;;
        # list tags and print bookmarks of chosen tag
        tag) _get_file_content "${2}" | _get_tag_content "$( _tags_from_file | fzf --exact )" | _filter_bm;;
        # list files and print bookmarks of chosen file
        file) _get_file_content "^$( _list_files | fzf --exact )" | _filter_bm ;;
        # query for bookmarks and list in fzf
        query) _query "${2}" | _filter_bm | fzf -m --exact ;;
        # list tags and files and print bookmarks of chosen tag with file
        *) choice="$( _tags_with_file | fzf --exact )"; _get_file_content "${choice%% #*}" | _get_tag_content "${choice#* }" | _filter_bm ;;
    esac
}

# pass results of `_menu` back into fzf
# print if only one result
_mmenu(){
    choice="$( _menu $@ )"
    if [ $( echo "$choice" | wc -l ) -gt 1 ] && [ "$1" != "all" ]; then
        choice="$( echo "$choice" | fzf -m --sync )"
    fi
    echo "$choice"
}

_search(){
    grep -hr "^- \[.*\]\(.*\)$" | grep -i --color=auto -E "$@"
}

# use a query to filter out bookmarks
# query is of the form `subject#tag`
# where subject is filename and tag is markdown heading
# 
# you can use logical operators:
# + : OR
# ! : NOT
# +! : NOR
# no operator is logical AND
# Example: `filename#tag1##tag2+#tag3+!###tag4`
_query(){
    for arg in "$@"; do
        file="$( echo "$arg" | sed 's/\!*##*.*$//' )"
        tags="${arg#$file}"

        # make sure tags is empty if no tags given
        [ -z "${arg##*#*}" ] || tags=""

        # Get contents of files
        content="$( _get_file_content "${file}" )"
        
        # For each tag get bookmarks and filter
        (
        IFS='
'
        for tag in $( echo "$tags" | sed 's/+*\!*##*/\n&/g' ); do
            case "$tag" in
                +*) content="$content\n\n$( echo "$prev" | _get_tag_content "${tag#+}" )" ;;
                *) prev="$content"; content="$( echo "$content" | _get_tag_content "${tag#+}" )" ;;
            esac
        done
        [ -z "$content" ] || echo "$content"
        )
    done
}


###---------------###
### CLI FUNCTIONS ###
###---------------###

_add_fzf(){
    fzf --exact --prompt "$1" --bind="enter:replace-query+print-query,ctrl-space:print-query"
}

# if no argument given, use fzf to aid in adding bookmark
_cli_add(){
    if [ -z "$1" ]; then
        choice="$( _tags_with_file | fzf --exact )"
        file="$( echo "$choice" | awk -F' #' '{print $1}' )"
        tag="#$( echo "$choice" | awk -F' #' '{print $2}' )"
        uri="$( xclip -o 2> /dev/null | _add_fzf "URI: " )"

        _add "$uri" "$file" "$tag"
    else
        _add "$@"
    fi
}

_cli_edit(){
    if [ -z "$1" ]; then
        _edit "$( _list_files | fzf )"
    else
        _edit "$@"
    fi
}


_cli_open(){
    _mmenu "$@" | awk -F'[()]' '{print $(NF-1)}' | xargs -I {} sh -c "setsid -f $BROWSER {} > /dev/null 2>&1; sleep 0.1"
}

_cli_list(){
    case "$1" in
        all|bm) _get_file_content "${2}" | _get_bm ;;
        file) _list_files "${2}" ;;
        tag) _tags_from_file "${2}" ;;
        *) _get_file_content "${2}" | _get_bm ;;
    esac
}

_cli_menu(){
    _menu "$@"
}

_cli_mmenu(){
    _mmenu "$@"
}

_cli_query(){
    _query "$@" | _filter_bm
}

_cli_search(){
    _search "$@"
}

_cli_grep(){
    grep -hr -i --color=auto "$@"
}

_cli_add_file(){
    _add_file "$@"
}

[ -z "$1" ] && echo "$__usage"
while test $# -gt 0; do
    case "$1" in
        -h|--help) echo "$__help"; exit ;;
        -a|--add) shift; _cli_add $@; exit ;;
        -e|--edit) shift; _cli_edit $@; exit ;;
        -o|--open) shift; _cli_open $@; exit ;;
        -l|--list) shift; _cli_list $@; exit ;;
        -m|--menu) shift; _cli_menu $@; exit ;;
        -mm|--mmenu) shift; _cli_mmenu $@; exit ;;
        -q|--query) shift; _cli_query "$@"; exit ;;
        -g|--grep) shift; _cli_grep $@; exit ;;
        -s|--search) shift; _cli_search $@; exit ;;
        -c|--content) content_flag=1 ;;
        --addfile) shift; _cli_add_file "$@"; exit ;;
        *) _query "$@"; exit ;;
    esac
    shift
done
