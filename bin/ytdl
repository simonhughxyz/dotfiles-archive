#!/bin/sh

# YTDL
# Simon Hugh Moore
#
# A wrapper around youtube-dl to manage separate configs, queue downloads with
# task-spooler, notify when the download is finished and keep a history log

__usage="Usage: $(basename "$0") [OPTIONS]"
__help="$__usage
Download video or playlist using youtube-dl
Any argument starting with 'http' will be accepted as URL

Options:
  -t, --ts                                   Call task spooler
  -v, --video                                Download single video
  -q, --hq                                   Download single high quality video
  -a, --audio                                Download audio only
  -p, --playlist                             Download playlist
  -s, --slow                                 Don't use aria2
  -u, --url=url                              URL to download
  -H, --history                              Print download history
  -F, --failed                               Print failed download history
  -C, --clear                                Clear history and task spooler
  -M, --menu                                 Use fzf to select history
  -P, --persistent                           Use persistent history
  -h, --help                                 Print this help message
"


__fzf_keys="alt-? : Show keymap help in fzf
alt-u  : Print url to stdout
alt-U  : Copy url to clipboard
alt-t  : Print title to stdout 
alt-T  : Copy title to clipboard
alt-w  : Type out url with xdotool
alt-W  : Type out title with xdotool
alt-D  : Download video again
alt-V  : Play video
return : Open in BROWSER 
"

__menu_help="usage: $(basename $0) -M [OPTIONS]

Control windows in fzf

Options:
  help                          Print this help message
  history                       Select history with fzf
  failed                        Select failed history with fzf

Keymap:
$( echo "$__fzf_keys" | sed 's/^.*$/  &/' )"

_dependency(){ command -v "$1" > /dev/null || { echo "error: "$1" not found"; exit 1; }; }
_dependency "youtube-dl"
_dependency "ts"

# Runtime
runtime_dir=$XDG_RUNTIME_DIR/ytdl
runtime_history=$runtime_dir/history.download
runtime_failed_history=$runtime_dir/history.failed
mkdir -p $runtime_dir

# local
local_dir=~/.local/share/ytdl
local_history=$local_dir/history.download
local_failed_history=$local_dir/failed.download
mkdir -p $local_dir

# Task Spooler
export TMPDIR=$runtime_dir/ts
export TS_MAXFINISHED=6
mkdir -p $TMPDIR
ts -S 2

config_dir=$XDG_CONFIG_HOME/youtube-dl
video_config=$config_dir/config
hq_config=$config_dir/hq.config
playlist_config=$config_dir/pl.config
slow_config=$config_dir/slow.config
audio_config=$config_dir/audio.config
config=$video_config

_get_title(){
    # if failed, return url
    youtube-dl --get-title "$1" 2>/dev/null || echo "$1"
}

_download(){ 
    [ -z $url ] && echo "$__usage" && exit 1
    title="$( _get_title "$url" )"
    notify-send 'Add Download to queu...' ''"$title"''

    # title with ' escaped 
    etitle="$( echo "$title" | sed "s/'/'\"'\"'/g" )"
    msg="$( printf "%s\t%s\t%s" "$( date '+%Y-%m-%d %H:%M:%S' )" "$url" "$etitle" )"

    # Use printf to allow the use of ' to protect against command injection
    cmd="$( printf "youtube-dl --config-location '%s' --exec \"ffmpeg -i {} -c:v copy -c:a copy -metadata URL='%s' {}.tmp.mkv;mv -f {}.tmp.mkv {}\" '%s' || ( notify-send 'Download Failed!' '%s'; echo '%s' | tee -a %s %s > /dev/null; exit 1 )" "$config" "$url" "$url" "$etitle" "$msg" "$runtime_failed_history" "$local_failed_history" )"
    ts -L ytdl sh -c "$cmd"

    ts -d -L ytdl notify-send 'Download Complete!' ''"$title"''
    ts -d -L ytdl sh -c "echo '$msg' | tee -a $runtime_history $local_history > /dev/null"
    exit
}

_fzf(){
    fzf --delimiter "\t" --with-nth=3 --expect="alt-?,alt-u,alt-U,alt-t,alt-T,alt-w,alt-W,alt-D,alt-V" "$@"
}

# type out using xdotool
_write(){
    setsid xdotool sleep 0.1 type --clearmodifiers "$1" &
    sleep 0.001
}

# Use fzf to select history
_menu(){
    _dependency "fzf"
    _dependency "xdotool"

    case "$1" in
        help) echo "$__menu_help"; exit ;; 
        h|history) choice="$( cat "$history" | _fzf )" ;;
        f|failed) choice="$( cat "$failed_history" | _fzf )" ;;
        *) choice="$( cat "$history" | _fzf )" ;;
    esac

    key="$( echo "$choice" | head -n1 )"
    choice="$( echo "$choice" | tail -n1 )"
    [ -z "$choice" ] && exit

    url="$( echo "$choice" | cut -f2 )"
    title="$( echo "$choice" | cut -f3 )"

    case "$key" in
        alt-\?) echo -n "$__fzf_keys" | fzf --disabled >/dev/null;  _menu "$1" ;; # Show keymap help in fzf
        alt-u) echo "$url" ;; # Print url to stdout
        alt-U) echo "$url" | xsel ;; # Copy url to clipboard
        alt-t) echo "$title" ;; # Print title to stdout 
        alt-T) echo "$title" | xsel ;; # Copy title to clipboard
        alt-w) _write "$url"  ;; # Type out url with xdotool
        alt-W) _write "$title"  ;; # Type out title with xdotool
        alt-D) ytdl "$url"  ;; # Download video again
        alt-V) vid "$url"  ;; # Play video
        *) $BROWSER "$url" ;; # Open in BROWSER
    esac
}

history=$runtime_history
failed_history=$runtime_failed_history

while test $# -gt 0; do
    case "$1" in
        -h|--help) echo "$__help"; exit ;;
        -t|--ts) shift; ts $@; exit;;
        -P|--persistent) history=$local_history; failed_history=$local_failed_history ;;
        -H|--history) cat "$history"; exit;;
        -F|--failed) cat "$failed_history"; exit;;
        -M|--menu) shift; _menu $@ ; exit;;
        -C|--clear) ts -C; > "$history"; > "$failed_history" ;exit;;
        -v|--video) config=$video_config ;;
        -q|--hq) config=$hq_config ;;
        -a|--audio) config=$audio_config ;;
        -p|--playlist) config=$playlist_config ;;
        -s|--slow) config=$slow_config ;;
        -u) shift; url="$1" ;;
        --url=*) url=${1#*=} ;;
        http*) url="$1" ;;
        *) arg="$arg $1" ;;
    esac
    shift
done
_download "$arg"
